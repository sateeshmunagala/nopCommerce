@model TopMenuModel

@using Nop.Core.Domain.Topics

@functions {
    async Task CategoryLine(TopMenuModel.CategoryLineModel lineModel)
    {
        <li>
            <a href="@Url.RouteUrl("Category", new { SeName = lineModel.Category.SeName })">
                @lineModel.Category.Name
                @if (lineModel.Category.NumberOfProducts.HasValue)
                {
                    <text> </text>
                    @T("Categories.TotalProducts", lineModel.Category.NumberOfProducts.Value)
                }
            </a>
            @{
                //subcategories
                var subCategories = lineModel.ResponsiveMobileMenu ?
                //responsive (all categories)
                lineModel.Category.SubCategories :
                //standard design (only categories with "IncludeInTopMenu")
                lineModel.Category.SubCategories.Where(x => x.IncludeInTopMenu).ToList();

                var levelClass = "";
                if (lineModel.Level == 0)
                {
                    levelClass = "first-level";
                }
                if (subCategories.Count > 0)
                {
                    <div class="sublist-toggle"></div>
                    <ul class="sublist @levelClass">
                        @foreach (var subCategory in subCategories)
                        {
                            var categoryLineModel = new TopMenuModel.CategoryLineModel
                    {
                        Category = subCategory,
                        Level = lineModel.Level + 1,
                        ResponsiveMobileMenu = lineModel.ResponsiveMobileMenu
                    };
                            await CategoryLine(categoryLineModel);
                        }
                    </ul>
                }
            }
        </li>
    }
}

<div class="main-menu" style="min-height:40px;">

    <nav id="" class="navbar navbar-expand-lg navbar-dark bg-dark" aria-label="Offcanvas navbar large">
        <div class="container-fluid ">
            <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar2" aria-controls="offcanvasNavbar2" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            @await Component.InvokeAsync(typeof(LogoViewComponent))
            <div class="offcanvas offcanvas-start bg-dark text-light w-75" tabindex="-1" id="offcanvasNavbar2" aria-labelledby="offcanvasNavbar2Label">
                <div class="offcanvas-header">
                    <h5 class="offcanvas-title" id="offcanvasNavbar2Label">Technologies</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                </div>
                <div class="offcanvas-body">
                    <ul class="navbar-nav" style="">
                        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderMenuBefore, additionalData = Model })
                        @if (Model.DisplayHomepageMenuItem)
                        {
                            <li class="home-wrapper"><a class="nav-link" href="@Url.RouteUrl("HomePage")"><i class="fa fa-home fa-fw"></i></a></li>
                        }
                        @if (!Model.UseAjaxMenu)
                        {
                            var rootCategories = Model.Categories.Where(x => x.IncludeInTopMenu).ToList();
                            //var rootCategories = Model.Categories.ToList();
                            @foreach (var category in rootCategories)
                            {
                                var categoryLineModel = new TopMenuModel.CategoryLineModel
                    {
                        Category = category
                    };
                                @await Html.PartialAsync("_CategoryLine.TopMenu", categoryLineModel)
                            }
                        }
                        @foreach (var topic in Model.Topics)
                        {
                            <li class="nav-item"><a class="nav-link" href="@(Url.RouteUrl<Topic>(new { SeName = topic.SeName }))">@topic.Name</a></li>
                        }
                        @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
                        {
                            <li class="nav-item"><a class="nav-link" href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
                        }
                        @if (Model.DisplayProductSearchMenuItem)
                        {
                            <li class="nav-item"><a class="nav-link" href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
                        }
                        @if (Model.DisplayCustomerInfoMenuItem)
                        {
                            <li class="nav-item "><a class="nav-link" href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
                        }
                        @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
                        {
                            <li class="nav-item"><a class="nav-link" href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
                        }
                        @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
                        {
                            <li class="nav-item"><a class="nav-link" href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
                        }
                        @if (Model.DisplayContactUsMenuItem)
                        {
                            <li class="nav-item"><a class="nav-link" href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
                        }
                        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderMenuAfter, additionalData = Model })
                    </ul>
                </div>
                <div class="d-block d-sm-none" aria-label="only-mobile">
                    <h5>For any support</h5>
                    <p> mail us at <br> support@onjobsupport.in</p>
                </div>
            </div>
        </div>
    </nav>

    @if (Model.UseAjaxMenu)
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.menu-toggle').on('click', function () {
                    $(this).siblings('.top-menu.mobile').slideToggle('slow');
                });
                var localized_data = {
                    AjaxFailure: "@T("MainMenu.AjaxFailure")"
                };
                mainMenu.init('@Url.RouteUrl("GetCatalogRoot")', '@Url.RouteUrl("GetCatalogSubCategories")', 'ul.top-menu.notmobile', 'ul.top-menu.mobile', localized_data);
            });
        </script>

        <script src="~/js/public.menu.js" asp-location="Footer"></script>

    }


    <script type="text/javascript" asp-location="Footer">
        $(document).ready(function () {
            $("#mobile-menu .dropdown .fa-angle-down").on('click', function () {
                var $this = $(this);
                $this.siblings("ul.dropdown-menu").slideToggle("slow", function () {
                    if ($this.siblings("ul.dropdown-menu").css('display') == 'block')
                        $this.addClass("rotate");
                    else if ($this.siblings("ul.dropdown-menu").css('display') == 'none')
                        $this.removeClass("rotate");
                });
            });
        });
    </script>
</div>

<div id="overlay-drawer">
</div>


<script>
    //$(document).ready(function () {

    //    var ken = $("#overlay-drawer").kendoDrawer({
    //        template: "<ul> \
    //                    <li data-role='drawer-item'><span class='k-item-text'>First Item</span></li> \
    //                    <li data-role='drawer-separator'></li> \
    //                    <li data-role='drawer-item'><span class='k-item-text'>Second Item</span></li> \
    //                    <li data-role='drawer-item' class='k-state-selected'><span class='k-item-text'>Third Item</span></li> \
    //                    <li data-role='drawer-separator'></li> \
    //                    <li data-role='drawer-item'><span class='k-item-text'>Last Item</span></li> \
    //                    </ul>",
    //        position: "left",
    //        swipeToOpen: false
    //    }).data().kendoDrawer;

    //    $("#show").click(function (e) {
    //        var drawerInstance = $("#overlay-drawer").data().kendoDrawer;
    //        console.log(drawerInstance);
    //        drawerInstance.show();
    //    });

    //    $("#show-drawer").click(function (e) {
    //        var drawerInstance = $("#overlay-drawer").data().kendoDrawer;
    //        console.log(drawerInstance);
    //        drawerInstance.show();
    //    });

    //});
</script>

<style>
    .fieldlist {
        margin: 0 0 -1em;
        padding: 0;
    }

        .fieldlist li {
            list-style: none;
            padding-bottom: 1em;
        }

    #overlay-drawer {
        border: 0;
    }

    .k-drawer-content {
        padding: 1em;
    }

    #example .demo-section {
        max-width: 640px;
    }
</style>

@*Main menu Mmenu script*@
<script>
    // document.addEventListener(
    //     "DOMContentLoaded", () => {
    //         const menu = new MmenuLight(
    //             document.querySelector("#my-menu"),
    //             "(max-width: 800px)",
    //         );

    //         const navigator = menu.navigation({
    //             title: 'Technologies',
    //             //slidingSubmenus: false,
    //             theme: 'light'
    //         });

    //         const drawer = menu.offcanvas({
    //             position: 'left'
    //         });

    //         document.querySelector("a[href='#my-menu']")
    //             .addEventListener("click", (evnt) => {
    //                 evnt.preventDefault();
    //                 drawer.open();
    //             });

    //         document.querySelector("a[id='menu-close-icon']")
    //             .addEventListener("click", (evnt) => {
    //                 evnt.preventDefault();
    //                 drawer.close();
    //             });
    //     }
    // );
</script>

<style>
    /*.navbar-inverse .navbar-nav > li > a {
                                                color: black !important;
                                            }*/
    .mm {
        background: #ffe;
        color: yellow;
        /* --mm-spn-item-height: 46px;*/
        --mm-ocd-max-width: 300px;
        background-color: yellow !important;
        color: greenyellow !important;
        --mm-spn-item-height: 30px !important;
        --mm-spn-item-indent: 0px !important;
        --mm-ocd-width: 50% !important;
    }

    .mm-spn.mm-spn--light {
        color: black;
        background-color: white;
    }

    .mm-arrow {
        display: none;
    }

    #my-menu ul.nav.navbar-nav li {
        border-bottom: 0px solid black !important;
    }

        #my-menu ul.nav.navbar-nav li a:hover {
            color: black !important;
        }

    .mm-arrow:after {
        display: none;
    }

    .mm-spn li::after {
        margin-left: 0px !important;
    }

    .mm-spn li::before {
        content: none !important;
    }

    .menu-list {
        padding-left: 5px;
    }

        .menu-list i {
            padding-top: 10px;
        }
</style>