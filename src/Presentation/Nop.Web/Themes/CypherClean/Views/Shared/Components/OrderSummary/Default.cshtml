@model ShoppingCartModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Media
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject IWebHelper webHelper
@inject IWorkContext workContext
@inject MediaSettings mediaSettings
@inject OrderSettings orderSettings
<div class="order-summary-content">
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OrderSummaryContentBefore, additionalData = Model })
    @await Html.PartialAsync("_OrderReviewData", Model.OrderReviewData)
    @if (Model.Items.Count > 0)
    {
        if (Model.Warnings.Count > 0)
        {
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        }
        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@
        <form asp-route="ShoppingCart" method="post" enctype="multipart/form-data" id="shopping-cart-form">
            <div class="table-wrapper">
                <table class="cart table table-bordered table-hover">
                    <colgroup>
                        @if (Model.IsEditable)
                        {
                            <col width="1" />
                        }
                        @if (Model.ShowSku)
                        {
                            <col width="1" />
                        }
                        @if (Model.ShowProductImages)
                        {
                            <col width="1" />
                        }
                        <col />
                        @if (Model.ShowVendorName)
                        {
                            <col width="1" />
                        }
                        <col width="1" />
                        <col width="1" />
                        <col width="1" />
                    </colgroup>
                    <thead>
                        <tr>
                            @if (Model.IsEditable)
                            {
                                <th class="remove-from-cart">
                                    @T("ShoppingCart.Remove")
                                </th>
                            }
                            @if (Model.ShowSku)
                            {
                                <th class="sku">
                                    @T("ShoppingCart.SKU")
                                </th>
                            }
                            @if (Model.ShowProductImages)
                            {
                                <th class="product-picture">
                                    @T("ShoppingCart.Image")
                                </th>
                            }
                            <th class="product">
                                @T("ShoppingCart.Product(s)")
                            </th>
                            @if (Model.ShowVendorName)
                            {
                                <th class="vendor">
                                    @T("ShoppingCart.VendorName")
                                </th>
                            }
                            <th class="unit-price">
                                @T("ShoppingCart.UnitPrice")
                            </th>
                            <th class="quantity">
                                @T("ShoppingCart.Quantity")
                            </th>
                            <th class="subtotal">
                                @T("ShoppingCart.ItemTotal")
                            </th>

                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Items)
                        {
                        <tr>
                            @if (Model.IsEditable)
                            {
                                <td class="remove-from-cart">
                                    @if (item.DisableRemoval)
                                    {
                                        <text>&nbsp;</text>
                                    }
                                    else
                                    {
                                    <div class="form-check mr-sm-0 mb-sm-0 mb-0">
                                        <input class="form-check-input" id="removefromcart@(item.Id)" type="checkbox" name="removefromcart" value="@(item.Id)" />
                                        <label class="form-check-label" for="removefromcart@(item.Id)"> &nbsp;</label>
                                    </div>
                                    }
                                </td>
                            }
                            @if (Model.ShowSku)
                            {
                                <td class="sku">
                                    <label class="td-title">@T("ShoppingCart.SKU"):</label>
                                    <span class="sku-number">@item.Sku</span>
                                </td>
                            }
                            @if (Model.ShowProductImages)
                            {
                                <td class="product-picture">
                                    <a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))">
                                        <img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" width="@mediaSettings.DefaultImageQuality" />
                                    </a>
                                </td>
                            }
                            <td class="product">
                                <a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))" class="product-name">@item.ProductName</a>
                                @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                {
                                    <div class="attributes">
                                        @Html.Raw(item.AttributeInfo)
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(item.RecurringInfo))
                                {
                                    <div class="recurring-info">
                                        @Html.Raw(item.RecurringInfo)
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(item.RentalInfo))
                                {
                                    <div class="rental-info">
                                        @Html.Raw(item.RentalInfo)
                                    </div>
                                }
                                @if (Model.IsEditable && item.AllowItemEditing)
                                {
                                    var editCartItemUrl = Url.RouteUrl<Product>(new { SeName = item.ProductSeName }, webHelper.GetCurrentRequestProtocol());
                                    editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid", item.Id.ToString());
                                    <div class="edit-item">
                                        <a href="@editCartItemUrl">@T("Common.Edit")</a>
                                    </div>
                                }
                                @if (item.Warnings.Count > 0)
                                {
                                    <div class="message-error alert alert-danger">
                                        <ul>
                                            @foreach (var warning in item.Warnings)
                                            {
                                                <li>@Html.Raw(warning)</li>
                                            }
                                        </ul>
                                    </div>
                                }
                            </td>
                            @if (Model.ShowVendorName)
                            {
                                <td class="vendor">
                                    <label class="td-title">@T("ShoppingCart.VendorName"):</label>
                                    <span class="vendor-name">@item.VendorName</span>
                                </td>
                            }
                            <td class="unit-price">
                                <label class="td-title">@T("ShoppingCart.UnitPrice"):</label>
                                <span class="product-unit-price">@item.UnitPrice</span>
                            </td>
                            <td class="quantity">
                                <label class="td-title" for="itemquantity@(item.Id)">@T("ShoppingCart.Quantity"):</label>
                                @if (Model.IsEditable)
                                {
                                    if (item.AllowedQuantities.Count > 0)
                                    {
                                        <select name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" class="qty-dropdown">
                                            @foreach (var qty in item.AllowedQuantities)
                                            {
                                                <option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        <div class="product-quantity">
                                            <div class="quantity down" id="quantity-down-@(item.Id)">
                                                <svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="12" height="12" x="0" y="0" viewBox="0 0 121.805 121.804" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><path d="M7.308 68.211h107.188a7.309 7.309 0 0 0 7.309-7.31 7.308 7.308 0 0 0-7.309-7.309H7.308a7.31 7.31 0 0 0 0 14.619z" fill="#000000" opacity="1" data-original="#000000"></path></g></svg>
                                            </div>
                                            <input name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input form-control" aria-label="@T("ShoppingCart.Quantity")" onchange="$('#updatecart').trigger('click');" />
                                            <div class="quantity up" id="quantity-up-@(item.Id)">
                                                <svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="12" height="12" x="0" y="0" viewBox="0 0 426.667 426.667" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><path d="M405.332 192H234.668V21.332C234.668 9.559 225.109 0 213.332 0 201.559 0 192 9.559 192 21.332V192H21.332C9.559 192 0 201.559 0 213.332c0 11.777 9.559 21.336 21.332 21.336H192v170.664c0 11.777 9.559 21.336 21.332 21.336 11.777 0 21.336-9.559 21.336-21.336V234.668h170.664c11.777 0 21.336-9.559 21.336-21.336 0-11.773-9.559-21.332-21.336-21.332zm0 0" fill="#000000" opacity="1" data-original="#000000" class=""></path></g></svg>
                                            </div>
                                        </div>
                                            <script asp-location="Footer">
                                                $(function () {
                                                    $('#quantity-up-@(item.Id)').on('click',
                                                        function (e) {
                                                            var input = $(document).find('#itemquantity@(item.Id)');
                                                            var oldValue = parseInt(input.val());
                                                            var newVal = oldValue + 1;
                                                            input.val(newVal.toString());
                                                            input.trigger("change");
                                                        });

                                                    $('#quantity-down-@(item.Id)').on('click',
                                                        function (e) {
                                                            var input = $(document).find('#itemquantity@(item.Id)');
                                                            var oldValue = parseInt(input.val());
                                                            var newVal = oldValue - 1;
                                                            input.val(newVal.toString());
                                                            input.trigger("change");
                                                        });
                                                });
                                            </script>
                                    }
                                }
                                else
                                {
                                    <span class="product-quantity">@item.Quantity</span>
                                }
                            </td>
                            <td class="subtotal">
                                <label class="td-title">@T("ShoppingCart.ItemTotal"):</label>
                                <span class="product-subtotal">@item.SubTotal</span>
                                @if (!string.IsNullOrEmpty(item.Discount))
                                {
                                    <div class="discount">
                                        @T("ShoppingCart.ItemYouSave", item.Discount)
                                    </div>
                                    if (item.MaximumDiscountedQty.HasValue)
                                    {
                                        <div class="discount-additional-info">
                                            @T("ShoppingCart.MaximumDiscountedQty", item.MaximumDiscountedQty.Value)
                                        </div>
                                    }
                                }
                            </td>
                        </tr>
                        }
                    </tbody>
                </table>
            </div>
            @if (Model.IsEditable && Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
            {
                var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <div class="tax-shipping-info">
                    @T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteTopicUrl("shippinginfo"))
                </div>
            }
            <div class="cart-options">
                @if (Model.IsEditable)
                {
                <div class="common-buttons">
                        <button type="submit" name="updatecart" id="updatecart" class="btn btn-secondary button-2 update-cart-button" style="display: none;">@T("ShoppingCart.UpdateCart")</button>
                        <button type="submit" name="continueshopping" class="btn btn-secondary button-2 continue-shopping-button">@T("ShoppingCart.ContinueShopping")</button>
                        @await Component.InvokeAsync(typeof(ShoppingCartEstimateShippingViewComponent))
                </div>
                }
                @if (Model.IsEditable)
                {
                    @await Html.PartialAsync("_CheckoutAttributes", Model)
                }
                @await Component.InvokeAsync(typeof(SelectedCheckoutAttributesViewComponent))
            </div>
            <div class="cart-footer">
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OrderSummaryCartFooter, additionalData = Model })
                <div class="row">
                    <div class="col-sm-12 col-md-6 col-lg-6 col-xl-6">
                        @if (Model.IsEditable)
                        {
                            <div class="cart-collaterals">
                                <div class="deals">
                                    @await Html.PartialAsync("_DiscountBox", Model.DiscountBox)
                                    @await Html.PartialAsync("_GiftCardBox", Model.GiftCardBox)
                                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OrderSummaryContentDeals, additionalData = Model })
                                </div>
                            </div>
                        }
                    </div>

                    <div class="col-sm-12 col-md-6 col-lg-6 col-xl-6">
                        <div class="totals">
                            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OrderSummaryTotals, additionalData = Model })
                            @await Component.InvokeAsync(typeof(OrderTotalsViewComponent), new { isEditable = Model.IsEditable })
                            @if (Model.IsEditable)
                            {
                                if (!string.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                                {
                                    <div class="min-amount-warning alert alert-warning">
                                        @Model.MinOrderSubtotalWarning
                                    </div>
                                }
                            }
                            @if (Model.IsEditable)
                            {
                                if (Model.TermsOfServiceOnShoppingCartPage)
                                {
                                    <div id="terms-of-service-warning-box" title="@T("Checkout.TermsOfService")" style="display: none;">
                                        <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                                    </div>
                                    <div class="terms-of-service">
                                        <div class="custom-control form-check mb-2 mr-sm-2 mb-sm-0">
                                            <input class="form-check-input" id="termsofservice" type="checkbox" name="termsofservice" />
                                            <label for="termsofservice" class="form-check-label">
                                                @T("Checkout.TermsOfService.IAccept")
                                                @if (Model.TermsOfServicePopup)
                                                {
                                                    <a class="read" id="read-terms">@T("Checkout.TermsOfService.Read")</a>
                                                    <script asp-location="Footer">
                                                        $(function () {
                                                            $('#read-terms').on('click',
                                                                function(e) {
                                                                    e.preventDefault();
                                                                    displayPopupContentFromUrl(
                                                                        '@Url.RouteUrl("TopicPopup", new {SystemName = "conditionsofuse"})',
                                                                        '@T("Checkout.TermsOfService")');
                                                                });
                                                        });
                                                    </script>
                                                }
                                                else
                                                {
                                                     <a class="read" id="read-terms" href="@Url.RouteTopicUrl("conditionsofuse")">@T("Checkout.TermsOfService.Read")</a>
                                                }
                                            </label>
                                        </div>
                                    </div>
                                }
                                <div class="checkout-buttons">
                                    @if (string.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && !Model.HideCheckoutButton)
                                    {
                                        <script asp-location="Footer">
                                            $(function () {
                                                $('#checkout').on('click', function () {
                                                    //terms of service
                                                    var termOfServiceOk = true;
                                                    if ($('#termsofservice').length > 0) {
                                                        //terms of service element exists
                                                        if (!$('#termsofservice').is(':checked')) {
                                                            $("#terms-of-service-warning-box").dialog();
                                                            termOfServiceOk = false;
                                                        } else {
                                                            termOfServiceOk = true;
                                                        }
                                                    }
                                                    return termOfServiceOk;
                                                });
                                            });
                                        </script>
                                        if (orderSettings.CheckoutDisabled)
                                        {
                                            <div class="checkout-disabled">
                                                @T("Checkout.Disabled")
                                            </div>
                                        }
                                        else
                                        {
                                            <button type="submit" id="checkout" name="checkout" value="checkout" class="btn btn-primary button-1 checkout-button">
                                                @T("Checkout.Button")
                                            </button>
                                        }
                                    }
                                </div>
                                <div class="addon-buttons">
                                    @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
                                    @foreach (var pm in Model.ButtonPaymentMethodViewComponents)
                                    {
                                        @await Component.InvokeAsync(pm)
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
                
            
            </div>
            @if (Model.IsEditable)
            {
                @await Component.InvokeAsync(typeof(CrossSellProductsViewComponent))
            }
        </form>
    }
    else
    {
<div class="no-data">
    <div class="alert alert-danger">
        @T("ShoppingCart.CartIsEmpty")
    </div>
</div>
    }
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OrderSummaryContentAfter, additionalData = Model })
</div>